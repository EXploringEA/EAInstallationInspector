<?xml version="1.0"?>
<doc>
<assembly>
<name>
eaInstallationInspector
</name>
</assembly>
<members>
<member name="T:eaInstallationInspector.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:eaInstallationInspector.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:eaInstallationInspector.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:eaInstallationInspector.My.Resources.Resources.eaInstallationInspectorInformationV7">
<summary>
  Looks up a localized string similar to {\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff37\deff0\stshfdbch31505\stshfloch31506\stshfhich31506\stshfbi0\deflang2057\deflangfe2057\themelang2057\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f2\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\fbidi \froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f10\fbidi \fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f34\fbidi \f [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="T:eaInstallationInspector.frmListOfClasses">
 <summary>
 Form to display a list of public classes and methods for a selected AddIn entry (DLL)
 </summary>
 <seealso cref="T:System.Windows.Forms.Form" />
</member>
<member name="F:eaInstallationInspector.frmListOfClasses.ListOfClasses">
 <summary>
 List of public methods exposed by DLL
 </summary>
</member>
<member name="M:eaInstallationInspector.frmListOfClasses.#ctor(System.Collections.ArrayList@)">
 <summary>
 Initializes a new instance of the <see cref="T:eaInstallationInspector.frmListOfClasses"/> class.
 </summary>
 <param name="pListOfClasses">list of methods.</param>
</member>
<member name="M:eaInstallationInspector.frmListOfClasses.btClose_Click(System.Object,System.EventArgs)">
 <summary>
 Handles the Click event of the btClose control.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
</member>
<member name="M:eaInstallationInspector.frmListOfClasses.frmListOfClasses_Load(System.Object,System.EventArgs)">
 <summary>
 Handles the Load event of the frmListOfMethods control - populate the datagrid with the list of public methods provided
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
</member>
<member name="M:eaInstallationInspector.frmListOfClasses.Initdg">
 <summary>
 Initialise the datagrid
 </summary>
</member>
<member name="M:eaInstallationInspector.frmListOfClasses.dgView_ColumnWidthChanged(System.Object,System.Windows.Forms.DataGridViewColumnEventArgs)">
 <summary>
 Handles the ColumnWidthChanged event of the dgView control.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.Windows.Forms.DataGridViewColumnEventArgs"/> instance containing the event data.</param>
</member>
<member name="M:eaInstallationInspector.frmListOfClasses.dgView_Resize(System.Object,System.EventArgs)">
 <summary>
 Handles the Resize event of the dgView control.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
</member>
<member name="M:eaInstallationInspector.frmListOfClasses.DGresize">
 <summary>
 Resize datagrid
 </summary>
</member>
<member name="M:eaInstallationInspector.frmListOfClasses.btSelectAll_Click(System.Object,System.EventArgs)">
 <summary>
 Handles the Click event of the btSelectAll to select all data and copy to clipboard
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
</member>
<member name="T:eaInstallationInspector.frmInspector">
 <summary>
 Main form - presents the results of checking for EA AddIn's and related classes
 </summary>
 <seealso cref="T:System.Windows.Forms.Form" />
</member>
<member name="M:eaInstallationInspector.frmInspector.OpenLogFileWithDefaultProgram">
 <summary>
 Open file using windows associated program
 We assume that the filename has been set up AND Exists
 </summary>
</member>
<member name="M:eaInstallationInspector.frmInspector.openGenFileFile(System.String)">
 <summary>
 Function to support openning an app using the filename provided using the current windows associated application
 </summary>
 <param name="filename">The filename.</param>
 <returns>True if successful else False</returns>
 <remarks>Checks that the file exists otherwise will fail</remarks>
</member>
<member name="M:eaInstallationInspector.frmInspector.frmInspector2_Load(System.Object,System.EventArgs)">
 <summary>
 Handles the Load event of the frmInspector control - which retrieves and presents the information for EA AddIns
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
</member>
<member name="M:eaInstallationInspector.frmInspector.btHelp_Click(System.Object,System.EventArgs)">
 <summary>
 Handles the help button to present the help information
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
</member>
<member name="M:eaInstallationInspector.frmInspector.btCopy_Click(System.Object,System.EventArgs)">
 <summary>
 Handles copy button which capture the screen and copy to the windows clipboard
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
</member>
<member name="M:eaInstallationInspector.frmInspector.LinkLabel1_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
 <summary>
 Handles the LinkClicked event of the LinkLabel1 control.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.Windows.Forms.LinkLabelLinkClickedEventArgs"/> instance containing the event data.</param>
</member>
<member name="M:eaInstallationInspector.frmInspector.btRefresh_Click(System.Object,System.EventArgs)">
 <summary>
 Handles the refresh list button
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
</member>
<member name="M:eaInstallationInspector.frmInspector.lvListOfAddIns_SizeChanged(System.Object,System.EventArgs)">
 <summary>
 Handles the SizeChanged for listview
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
</member>
<member name="M:eaInstallationInspector.frmInspector.lvListOfAddIns_DoubleClick(System.Object,System.EventArgs)">
 <summary>
 Handles the DoubleClick event for listview entry - used to present the addin detail form for the selected row
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
</member>
<member name="M:eaInstallationInspector.frmInspector.startTree(eaInstallationInspector.NodeInfo)">
 <summary>
 Start a tree from the given node
 </summary>
 <param name="pNode"></param>
 <remarks></remarks>
</member>
<member name="M:eaInstallationInspector.frmInspector.lvQuery_SizeChanged(System.Object,System.EventArgs)">
 <summary>
 Handles the SizeChanged for listview
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
</member>
<member name="M:eaInstallationInspector.frmInspector.ProjectBrowser_AfterSelect(System.Object,System.Windows.Forms.TreeViewEventArgs)">
 <summary>
 Display on click 
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:eaInstallationInspector.frmInspector.ProjectBrowser_DoubleClick(System.Object,System.EventArgs)">
 <summary>
 Function that responds to selected item in treeview and
 displays the element information in the tab
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:eaInstallationInspector.frmInspector.ProjectBrowser_AfterExpand(System.Object,System.Windows.Forms.TreeViewEventArgs)">
 <summary>
 Handles the after expand to launch - this results in creating a background thread to do the processing
 setting up the DoWork method and the workercompleted method
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:eaInstallationInspector.frmInspector.bw_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
 <summary>
 Gets a list of the node children in its own thread
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:eaInstallationInspector.frmInspector.bw_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
 <summary>
 Handle the completion from the background worker which has found the node children
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:eaInstallationInspector.frmInspector.AddVirtualNode(System.Windows.Forms.TreeNode)">
 <summary>
 Add a virtual node at the specified node
 </summary>
 <param name="tNode"></param>
 <remarks>No content is added - this will occur in the background after the node has been expanded</remarks>
</member>
<member name="M:eaInstallationInspector.frmInspector.getNodeChildren(eaInstallationInspector.NodeInfo)">
 <summary>
 Get an array of children give the parent package/element
 </summary>
 <param name="pParent"></param>
 <returns>Nodes to add to parent</returns>
 <remarks></remarks>
</member>
<member name="M:eaInstallationInspector.frmInspector.ProjectBrowser_AfterCollapse(System.Object,System.Windows.Forms.TreeViewEventArgs)">
 <summary>
 called after the collapse of a node - to force a reload next time around
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="F:eaInstallationInspector.AddInInformation.SparxKeys32">
 <summary>
 The sparx keys - 32-bit  
 </summary>
</member>
<member name="F:eaInstallationInspector.AddInInformation.SparxKeysWOW32">
 <summary>
 The sparx keys - 32-bit addin for 64-bit OS
 </summary>
</member>
<member name="F:eaInstallationInspector.AddInInformation.SparxKeys64">
 <summary>
 The sparx keys - x64
 </summary>
</member>
<member name="F:eaInstallationInspector.AddInInformation.eaHKCU32AddInKeys">
 <summary>
 HKCU Keys
 </summary>
</member>
<member name="F:eaInstallationInspector.AddInInformation.eaHKLM32AddInKey64">
 <summary>
 HKLM Keys
 </summary>
</member>
<member name="F:eaInstallationInspector.AddInInformation.eaHKCU64AddInKeys">
 <summary>
 HKCU Keys
 </summary>6
</member>
<member name="F:eaInstallationInspector.AddInInformation.eaHKLM64AddInKeys">
 <summary>
 HKLM Keys
 </summary>
</member>
<member name="M:eaInstallationInspector.AddInInformation.getListOfEAAddinEntries">
 <summary>
 Gets a list of addin entries from Windows Registry
 - start with HKCU as they have precendence over the HKLM
 Assume that the registry keys in the following locations identify 32-bit AddIns
	"HKCU\SOFTWARE\Sparx Systems\EAAddins" - HKCU
	"HKLM\ SOFTWARE\Sparx Systems\EAAddins" - HKLM, although if the addin Is running on a 64-bit operating system this would be "HKLM\ SOFTWARE\WOW6432NODE\Sparx Systems\EAAddins"  HKLMWow
	 Assume that the registry keys in the following locations identify 64-bit AddIns
	 "HKCU\SOFTWARE\Sparx Systems\EAAddins64" - HKCU64
	 "HKLM\ SOFTWARE\Sparx Systems\EAAddins64" – HKLM64
 </summary>
 <returns>List of AddIn entries</returns>
</member>
<member name="M:eaInstallationInspector.AddInInformation.getListof32BitHKCUAddinEntries">
 <summary>
 32 bit AddIns when install for current users only
 Sparx keys (32-bit apps) will be in HKCU\Software\SparxSystems\EAAddIns
 </summary>
 <returns>List of 32-bit AddIns for current user</returns>
</member>
<member name="M:eaInstallationInspector.AddInInformation.getListof32BitHKLMAddinEntries">
 <summary>
 32 bit AddIns when installed local machine (for all users)
 Sparx keys (32-bit apps) can be in HKLM\Software\SparxSystems\EAAddIns
 BUT NOTE for 64-bit operating systems the keys will be located in HKLM\Software\Wow6432Node\SparxSystems\EAAddIns
 </summary>
 <returns>List of 32-bit Addins for local machine</returns>
</member>
<member name="M:eaInstallationInspector.AddInInformation.getListof64BitHKCUAddinEntries">
 <summary>
 64 bit AddIns when install for current users only
 HKCU\Software\SparxSystems\EAAddins64
 </summary>
 <returns>List of current user 64-bit addin entries</returns>
</member>
<member name="M:eaInstallationInspector.AddInInformation.getListof64BitHKLMAddinEntries">
 <summary>
 64 bit AddIns when installed for all users
 HKLM\Software\Wow6432Node\SparxSystems\EAAddIns64
 </summary>
 <returns>List of 64-bit addins for Local Machine (all users)</returns>
</member>
<member name="P:eaInstallationInspector.AddInEntry.AddInName">
 <summary>
 Gets or sets the name of the add in.
 </summary>
 <value>
 The AddIn Name
 </value>
</member>
<member name="P:eaInstallationInspector.AddInEntry.ClassName">
 <summary>
 Gets or sets the class definition.
 </summary>
 <value>
 The class name i.e. Assembly.Class
 </value>
</member>
<member name="P:eaInstallationInspector.AddInEntry.SparxEntry">
 <summary>
 Gets or sets the sparx entry.
 </summary>
 <value>
 The location of the SparxEntry in registry - e.g. HKCU or HKLM
 </value>
</member>
<member name="P:eaInstallationInspector.AddInEntry.ClassSource">
 <summary>
 Gets or sets the class source.
 </summary>
 <value>
 Location of class in registry  - e.g. HKCU or HKLM
 </value>
</member>
<member name="P:eaInstallationInspector.AddInEntry.CLSID">
 <summary>
 Gets or sets the CLSID.
 </summary>
 <value>
 Class ID (GUID)
 </value>
</member>
<member name="P:eaInstallationInspector.AddInEntry.CLSIDSource">
 <summary>
 Gets or sets the CLSID source.
 </summary>
 <value>
 Class ID Source in registry  - e.g. HKCU or HKLM
 </value>
</member>
<member name="P:eaInstallationInspector.AddInEntry.DLL">
 <summary>
 Gets or sets the DLL.
 </summary>
 <value>
 The DLL full file pathname
 </value>
</member>
<member name="F:eaInstallationInspector.ClassInformation.HKCU_Classes">
 <summary>
 HKCU Classes for 
 * 32-bit on 32-bit OS
 * 64-bit on 64-bit OS
 </summary>
</member>
<member name="F:eaInstallationInspector.ClassInformation.HKLM_Classes">
 <summary>
 HKLM Classes
 * 32-bit on 32-bit OS
 * 64-bit on 64-bit OS
 </summary>
</member>
<member name="F:eaInstallationInspector.ClassInformation.HKLMWow1_Classes">
 <summary>
 HKLM Classes for 
 * 32-bit on 64-bit OS
 </summary>
</member>
<member name="M:eaInstallationInspector.ClassInformation.getClassDLLFilename">
 <summary>
 Get the DLL filename which we assume is in the relevant place for HKCU / HKLM - the hive is provided by the caller
 </summary>
 <remarks>There are some instance where the file would not be found as expected - 
 e.g. the COMServer class but don't think this is a likely case have included some checks</remarks>
</member>
<member name="M:eaInstallationInspector.ClassInformation.DLLexists(System.String)">
 <summary>
 Dls the lexists.
 </summary>
 <param name="pFilePath">DLL Filename path.</param>
 <returns>True if exists else false</returns>
</member>
<member name="F:eaInstallationInspector.Constants.cNotSet">
 <summary>
 Text not set
 </summary>
</member>
<member name="T:eaInstallationInspector.frmEntryDetail">
 <summary>
 Form to present the detail for a single entry
 </summary>
 <seealso cref="T:System.Windows.Forms.Form" />
</member>
<member name="M:eaInstallationInspector.frmEntryDetail.#ctor(eaInstallationInspector.AddInEntry)">
 <summary>
 Initializes a new instance of the <see cref="T:eaInstallationInspector.frmEntryDetail"/> class.
 Populate with the detail for the selected addin row
 </summary>
 <param name="pEntryDetail">The p entry detail.</param>
</member>
<member name="M:eaInstallationInspector.frmEntryDetail.btClose_Click(System.Object,System.EventArgs)">
 <summary>
 Handles the Click event of the btClose control.
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
</member>
<member name="M:eaInstallationInspector.frmEntryDetail.btCopyDetailToClipboard_Click(System.Object,System.EventArgs)">
 <summary>
 Handles copy button which capture the details screen and copy to the windows clipboard
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
</member>
<member name="T:eaInstallationInspector.frmHelp">
 <summary>
 Present help form
 </summary>
 <seealso cref="T:System.Windows.Forms.Form" />
</member>
<member name="M:eaInstallationInspector.frmHelp.Information_Load(System.Object,System.EventArgs)">
 <summary>
 Loads the help file in form
 </summary>
 <param name="sender">The source of the event.</param>
 <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
</member>
<member name="M:eaInstallationInspector.RegistryFunctions.SearchRegistry(System.String)">
 <summary>
 Search and Find Registry Function
 </summary>
</member>
<member name="M:eaInstallationInspector.Query.RunQuery">
 <summary>
 This function executes a registry query placing the outputs into the specific listview
 </summary>
</member>
<member name="M:eaInstallationInspector.Query.bw_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
 <summary>
 Runs a registry query its own thread
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:eaInstallationInspector.Query.bw_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
 <summary>
 Handle the completion from the background worker which has found the node children
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:eaInstallationInspector.SupportFunctions.versionString">
 <summary>
 Versions the string.
 </summary>
 <returns>EA Installation inspector version</returns>
</member>
<member name="M:eaInstallationInspector.SupportFunctions.init_lv(System.Windows.Forms.ListView)">
 <summary>
 init the list view headers
 add headers
 set width
 </summary>
 <param name="plv">Listview</param>
</member>
<member name="M:eaInstallationInspector.SupportFunctions.setWidths(System.Windows.Forms.ListView,System.Int32)">
 <summary>
 Scales the widths of Listview based based on either width provided or existing width
 </summary>
 <param name="plv">Listview</param>
 <param name="w">optional listview width, otherwise uses existing width </param>
</member>
<member name="M:eaInstallationInspector.SupportFunctions.Get3264AddInClassDetailsAndPopulateListview(System.Windows.Forms.ListView)">
 <summary>
 Routine to:
 * Look for the class related to addin entries for both 32 and 64 bit classes
 * Populate the listview with addin details
 </summary>
 <param name="plv">The PLV.</param>
 <remarks>
 32-bit addin keys are located in
 * HKCU
 * HLKM WOW6432Node
 64-bit addin keys are located in
 * HKCU
 * HKLM
 </remarks>
</member>
<member name="T:eaInstallationInspector.NamespaceDoc">
 <summary>
 <para>EA Installation Inspector - class documentation</para>
 <para>Copyright © 2015-2018 Adrian LINCOLN, EXploringEA</para>
 <para>This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</para>
 <para>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.</para>
 <para>You should have received a copy of the GNU General Public License along with this program.  If not, see http://www.gnu.org/licenses/.</para>
 <para>Contact: eaforms@EXploringEA.co.uk</para>
 </summary>
</member>
</members>
</doc>
